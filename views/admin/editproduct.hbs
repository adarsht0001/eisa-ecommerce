<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <title>Admin</title>
  <!-- plugins:css -->
  <link rel="stylesheet" href="/admin/vendors/feather/feather.css">
  <link rel="stylesheet" href="/admin/vendors/ti-icons/css/themify-icons.css">
  <link rel="stylesheet" href="/admin/vendors/css/vendor.bundle.base.css">
  <!-- endinject -->
  <!-- Plugin css for this page -->
  <link rel="stylesheet" href="/admin/vendors/ti-icons/css/themify-icons.css">
  <link rel="stylesheet" type="text/css" href="/admin/js/select.dataTables.min.css">
  <!-- End plugin css for this page -->
  <!-- inject:css -->
  <link rel="stylesheet" href="/admin/css/vertical-layout-light/style.css">
  <!-- endinject -->
  <link rel="shortcut icon" href="/admin/images/favicon.png" />


  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.12.1/css/jquery.dataTables.css">


  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
  <style>
    .g-height-50 {
      height: 50px;
    }

    .g-width-50 {
      width: 50px !important;
    }

    @media (min-width: 0) {
      .g-pa-30 {
        padding: 2.14286rem !important;
      }
    }

    .g-bg-secondary {
      background-color: #fafafa !important;
    }

    .u-shadow-v18 {
      box-shadow: 0 5px 10px -6px rgba(0, 0, 0, 0.15);
    }

    .g-color-gray-dark-v4 {
      color: #777 !important;
    }

    .g-font-size-12 {
      font-size: 0.85714rem !important;
    }

    .media-comment {
      margin-top: 20px
    }

    .singleImageCanvasContainer {
      overflow: hidden;
      height: 350px;
      width: 30%;
      display: inline-block;
      position: relative;
      padding-right: 0px;
      margin-right: 15px;
      border: 2px solid #dfdfdf;
      margin-bottom: 10px;
      padding: 4px;
      border-radius: .25rem;
    }

    .singleImageCanvasContainer .singleImageCanvasCloseBtn {
      position: absolute;
      right: 0;
    }

    .singleImageCanvasContainer .singleImageCanvas {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
  </style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
</head>


<body>
  <div class="container-scroller">
    {{>adminnavbar}}
    <!-- partial -->
    <div class="container-fluid page-body-wrapper">
      <!-- partial:partials/_sidebar.html -->
      {{>adminside}}
      <!-- partial -->
      <div class="main-panel">
        <div class="container">
          <div class="contract p-5">
            <h1 style="text-align: center;">Edit Product</h1>
            <form action="/admin/editproducts/{{data._id}}" method="post" enctype="multipart/form-data">
              <div class="form-group">
                <input type="text" name="product" class="form-control" placeholder="Product Name"
                  value="{{data.product}}">
              </div>
              <div class="form-group">
                <input type="text" name="brand" class="form-control" placeholder="Brand Name" value="{{data.brand}}">
              </div>
              <div class="form-group">
                <input type="text" name="description" class="form-control" placeholder="Description"
                  value="{{data.description}}">
              </div>

              <select name="category" class="custom-select custom-select-md mb-3" id="category">
                <option>{{data.category}} </option>
                {{#each category}}
                <option>{{this.Category}}</option>
                {{/each}}
              </select>

              <div class="form-group">
                <input name="price" type="number" class="form-control" placeholder="Price" id="price"
                  value="{{data.price}}">
              </div>
              <div class="form-group">
                <div class="form-group">
                  <input name="offerprice" type="text" class="form-control" id="offerprice" placeholder="Offer Price"
                    value="{{data.offerprice}}" readonly>
                </div>
                <div class="form-group">
                  <img id="proimg" style="width: 50px; height:70px" src="/product/{{data.imagefileName.[0]}}" alt=""
                    srcset="">
                  <img id="proimg1" style="width: 50px; height:70px" src="/product/{{data.imagefileName.[1]}}" alt=""
                    srcset="">
                  <img id="proimg2" style="width: 50px; height:70px" src="/product/{{data.imagefileName.[2]}}" alt=""
                    srcset="">
                   <input type="file" data-toggle="modal" data-target="#exampleModal" accept="image/*" class="form-control"
                        name="image" id="id_image" onchange="viewimg(event)" multiple />

                      <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog"
                        aria-labelledby="exampleModalLabel" aria-hidden="true">
                        <div class="modal-dialog modal-xl" role="document">
                          <div class="modal-content">
                            <div class="modal-header">
                              <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
                              <div class="modal-header border-bottom-0">
                                <button type="button" class="btn-close" data-dismiss="modal"
                                  aria-label="Close"></button>
                              </div>
                            </div>
                            <div class="modal-body">
                              <div class="form-group row" id="test">
                              </div>
                            </div>
                            <div class="modal-header text-center">
                              <button class="btn btn-success" type="button" data-dismiss="modal"
                                aria-label="Close">Save
                                Changes</button>
                            </div>
                          </div>
                        </div>
                      </div>
                </div>
                <button type="submit" class="btn btn-primary">Edit Product</button>
            </form>
          </div>
        </div>

        <!-- Optional JavaScript -->
        <!-- jQuery first, then Popper.js, then Bootstrap JS -->

        <script>

          function viewimg(e) {
            document.getElementById('proimg').hidden = false
            document.getElementById('proimg1').hidden = false
            document.getElementById('proimg2').hidden = false
            document.getElementById('proimg').src = URL.createObjectURL(e.target.files[0])
            document.getElementById('proimg1').src = URL.createObjectURL(e.target.files[1])
            document.getElementById('proimg2').src = URL.createObjectURL(e.target.files[2])
          }
        </script>
        <script defer src="https://cdn.crop.guide/loader/l.js?c=MYQDCY"></script>

        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
          integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
          crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"
          integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
          crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"
          integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
          crossorigin="anonymous"></script>
        <script>
          $("#category,#price").on('input', () => {
            value = document.getElementById('category').value
            $.ajax({
              url: '/admin/findCategory',
              method: 'get',
              data: {
                category: value
              },
              success: (response) => {
                price = document.getElementById('price').value
                percentage = response.Discount
                if (!price == '') {
                  offerprice = price - Math.round((price * percentage) / 100)
                  document.getElementById('offerprice').value = offerprice
                }
                else {
                  document.getElementById('offerprice').value = ''
                }
              }
            })

          })
        </script>
        <script>
          const input = document.getElementById('id_image')
          const test = document.getElementById('test')
          input.addEventListener('change', () => {
            // Getting image file object from the input variable
            const img_data = []
            const imagebox = []
            const crop_btn = []
            const confirm_btn = []
            const url = []
            const length = input.files.length
            for (i = 0; i < length; i++) {
              test.innerHTML += `<div class="col-4"><div id="image-box${i}" class="image-container" style="height: 350px; width: 350px;"> </div>
    <button class="btn btn-outline-info" id="crop-btn${i}" style="width: 100%; margin-top: 10px; display: block;" type="button">Crop</button> </div>`
            }
            for (i = 0; i < length; i++) {
              img_data[i] = input.files[i]
            }

            img_data.forEach((image_data, i) => {
              url[i] = URL.createObjectURL(image_data)
            })
            // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
            // The new object URL represents the specified File object or Blob object.
            url.forEach((url, i) => {
              document.getElementById('image-box' + i).innerHTML = `<img src="${url}" id="image${i}" style="width:100%;">`
            })

            // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.

            // Storing that cropping view image in a variable


            // Displaying the image box
            for (i = 0; i < length; i++) {
              document.getElementById('image-box' + i).style.display = 'block'
              document.getElementById('crop-btn' + i).style.display = 'block'
            }


            for (i = 0; i < length; i++) {
              cropper(img_data[i], document.getElementById('image' + i), i, document.getElementById('crop-btn' + i), document.getElementById('image-box' + i))
            }



            // Creating a croper object with the cropping view image
            // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
            // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
            let container = new DataTransfer();
            let fileInputElement = document.getElementById('id_image');



            function cropper(img_data, image, index, crop_btn, imagebox) {

              const cropper = new Cropper(image, {
                autoCropArea: 1,
                viewMode: 1,
                scalable: false,
                zoomable: false,
                movable: false,
                minCropBoxWidth: 50,
                minCropBoxHeight: 50,
              })

              // When crop button is clicked this event will get triggered
              crop_btn.addEventListener('click', () => {
                // This method coverts the selected cropped image on the cropper canvas into a blob object
                cropper.getCroppedCanvas().toBlob((blob) => {

                  // Gets the original image data
                  // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
                  let file = new File([blob], img_data.name, { type: "image/*", lastModified: new Date().getTime() });
                  // Create a new container

                  // Add the cropped image file to the container
                  container.items.add(file);

                  fileInputElement.files = container.files

                  // Replace the original image file with the new cropped image file



                  // Hide the cropper box
                  imagebox.style.display = 'none'
                  // Hide the crop button
                  crop_btn.style.display = 'none'
                });
              });
            }
          });
        </script>

        {{>adminbottom}}